apply plugin: "com.moowork.node"
apply plugin: "kotlin2js"


dependencies {
    compile "org.jetbrains.kotlin:kotlin-stdlib-js:$kotlin_version"
    compile project(':common-js')

    testCompile "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"

}

repositories {
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
}

compileKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.suppressWarnings = true
    kotlinOptions.verbose = true
    kotlinOptions.main = "call"
    kotlinOptions.moduleKind = "umd"
}

compileTestKotlin2Js {
    kotlinOptions.metaInfo = true
    kotlinOptions.sourceMap = true
    kotlinOptions.suppressWarnings = true
    kotlinOptions.verbose = true
    kotlinOptions.main = "call"
    kotlinOptions.moduleKind = "umd"
}

def outputDir = "${projectDir}/node_modules"

task assembleJs(type: Copy) {
    configurations.compile.each { File file ->
        from(zipTree(file.absolutePath), {
            includeEmptyDirs = false
            include { fileTreeElement ->
                def path = fileTreeElement.path
                path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
                        !path.startsWith("META-INF/"))
            }
        })
    }
    from compileKotlin2Js.destinationDir
    into "${outputDir}"
    dependsOn classes
}

//task jar2Module(type: NodeTask) {
//
//}

assemble.dependsOn assembleJs


//task populateNodeModules(type: Copy, dependsOn: compileKotlin2Js) {
//    from compileKotlin2Js.destinationDir
//
//    configurations.testCompile.each {
//        from zipTree(it.absolutePath).matching { include '*.js' }
//    }
//
//    into "${buildDir}/node_modules"
//}
//
////node {
////    version = nodeVersion
////    download = true
////}
//
//task installQunit(type: NpmTask) {
//    inputs.property('qunitVersion', qunitVersion)
//    outputs.dir file('node_modules/qunit')
//
//    args = ['install', "qunit@${qunitVersion}"]
//}
//
//task runQunit(type: NodeTask, dependsOn: [compileTestKotlin2Js, populateNodeModules, installQunit]) {
//    script = file('node_modules/qunit/bin/qunit')
//    args = [projectDir.toPath().relativize(file(compileTestKotlin2Js.outputFile).toPath())]
//}
//
//test.dependsOn runQunit
//
//task sourcesJar(type: Jar) {
//    classifier = 'sources'
//    from sourceSets.main.kotlin
//}
//
//artifacts {
//    archives sourcesJar
//}
